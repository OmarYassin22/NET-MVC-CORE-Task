@model IEnumerable<ARIBApp.Core.Contracts.EmployeeDTO>
@{
    ViewData["Title"] = "Employees";
    Layout = "_EmployeeLayout";
}

@await Html.PartialAsync("_EmployeeIndex", Model)

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete <span id="employeeName"></span>?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="confirmDelete" class="btn btn-danger">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let employeeIdToDelete = 0;

        function deleteEmployee(id, name) {
            employeeIdToDelete = id;
            document.getElementById('employeeName').textContent = name;
            var modal = new bootstrap.Modal(document.getElementById('deleteModal'));
            modal.show();
        }

        document.getElementById('confirmDelete').addEventListener('click', function() {
             const loadingIndicator = document.getElementById('ajax-loading');
            if (loadingIndicator) loadingIndicator.style.display = 'block';

             fetch('@Url.Action("Delete")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ id: employeeIdToDelete })
            })
            .then(response => response.json())
            .then(data => {
                 if (loadingIndicator) loadingIndicator.style.display = 'none';

                if (data.success) {
                     bootstrap.Modal.getInstance(document.getElementById('deleteModal')).hide();

                     const successToastBody = document.getElementById('successToastBody');
                    if (successToastBody) {
                        successToastBody.textContent = data.message;
                        const successToast = new bootstrap.Toast(document.getElementById('successToast'));
                        successToast.show();
                    }

                     fetch('@Url.Action("Index")', {
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => response.text())
                    .then(html => {
                        document.getElementById('main-content').innerHTML = html;
                    });
                } else {
                     const errorToastBody = document.getElementById('errorToastBody');
                    if (errorToastBody) {
                        errorToastBody.textContent = data.message;
                        const errorToast = new bootstrap.Toast(document.getElementById('errorToast'));
                        errorToast.show();
                    }
                }
            })
            .catch(error => {
                 if (loadingIndicator) loadingIndicator.style.display = 'none';

                 const errorToastBody = document.getElementById('errorToastBody');
                if (errorToastBody) {
                    errorToastBody.textContent = "An error occurred while processing your request.";
                    const errorToast = new bootstrap.Toast(document.getElementById('errorToast'));
                    errorToast.show();
                }
            });
        });
    </script>
}